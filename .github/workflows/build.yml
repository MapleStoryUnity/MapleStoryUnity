name: CI

on:
  pull_request: {}
  push: { branches: [main, master, develop] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_VERSION: 2021.1.1f1
  PROJECT_PATH: ./Source
  ULF_FILE: Unity_v2021.x.ulf

jobs:
  request_alf:
    name: Request .alf file ðŸ”‘
    runs-on: ubuntu-latest
    outputs:
      alf: ${{ steps.output.outputs.alf }}
    steps:
      - name: Request manual activation file
        id: alfFile
        uses: game-ci/unity-request-activation-file@main
        with:
          unityVersion: ${{ env.UNITY_VERSION }}

      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.alfFile.outputs.filePath }}
          path: ${{ steps.alfFile.outputs.filePath }}

      - name: Output
        id: output
        run: |
          echo "::set-output name=alf::${{ steps.alfFile.outputs.filePath }}"

  acquire_ulf:
    needs: [request_alf]
    name: Acquire .ulf file ðŸ”‘
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Download .alf artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.request_alf.outputs.alf }}

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install node package, `unity-license-activate`
        run: npm install --global unity-license-activate

      - name: Install node package, `unity-verify-code`
        run: npm install --global unity-verify-code

      - name: Read alf
        id: alfRead
        uses: juliangruber/read-file-action@v1.1.4
        with:
          path: ${{ needs.request_alf.outputs.alf }}

      - name: Activate the license
        continue-on-error: true
        run: unity-license-activate "${{ secrets.UNITY_EMAIL }}" "${{ secrets.UNITY_PASSWORD }}" "${{ needs.request_alf.outputs.alf }}"

      - name: Read ulf
        id: ulfRead
        uses: juliangruber/read-file-action@v1.1.4
        with:
          path: ${{ env.ULF_FILE }}

      - name: Update secret UNITY_LICENSE
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'UNITY_LICENSE'
          value: '${{ steps.ulfRead.outputs.content }}'
          token: ${{ secrets.ACCESS_TOKEN }}

  checklicense:
    needs: [acquire_ulf]
    name: check if UNITY_LICENSE is set in github secrets
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"

  test:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Test all modes âœ¨
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-
      - uses: game-ci/unity-test-runner@master
        id: testRunner
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          unityVersion: ${{ env.UNITY_VERSION }}
          testMode: all
          customParameters: "-nographics"
      - uses: actions/upload-artifact@v1
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  build:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
          - StandaloneLinux64
          - StandaloneOSX
          - Android
          - iOS
          - WebGL
          #- WSAPlayer
          #- PS4
          #- XboxOne
          #- tvOS
          #- Switch
          #- Stadia
          #- CloudRendering
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-

      - uses: game-ci/unity-builder@v2.0-alpha-13
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}

      - uses: actions/upload-artifact@v1
        with:
          name: Build
          path: build
